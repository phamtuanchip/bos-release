<template>
  <div>
    <el-container direction="vertical">
      <v-infinite-scroll @bottom="loadmore()" @top="reload()" :offset='0' class="left-scroll">
        <div v-show="loadingUp" style="text-align: center"><i class="el-icon-loading" ></i>&nbsp; Đang tải...</div>
        <el-card v-for="cell in datasrc.cells" class="box-card">
          <div class="text item">
            <p>{{cell}}</p>

          </div>
        </el-card>
        <br/>
        <div v-show="loadingDown" style="text-align: center"><i class="el-icon-loading" ></i>&nbsp; Đang tải...</div>
        <el-card v-if="!loadingDown && loadingUp && timeline.length == 0" class="box-card">
          <div class="center-div">Không có dữ liệu</div>
        </el-card>
      </v-infinite-scroll>
    </el-container>
  </div>
      <!--<div class="el-table__body-wrapper grab-bing" v-dragscroll>
        <table>
          <thead>
          <tr>
            <th class="default-column" rowspan="2">Stt</th>
            <th class="mt" rowspan="2">Mục tiêu / Công việc</th>
            <th class="default-column" rowspan="2">KPIs kế hoạch</th>
            <th class="default-column" rowspan="2">KPIs đạt được</th>
            <th class="default-column" rowspan="2">Hoàn thành</th>
            <th class="c" rowspan="2"></th>
            <th v-if="datasrc.ListCols['Kế hoạch']" :colspan="datasrc.ListCols['Kế hoạch'].length">Kế hoạch</th>
            <th class="c" rowspan="2"></th>
            <th v-if="datasrc.ListCols['Thực hiện']" :colspan="datasrc.ListCols['Thực hiện'].length">Thực hiện</th>
          </tr>
          <tr>
            <th class="default-column" v-if="datasrc.ListCols['Kế hoạch']" :class="'cl-'+item.Name" v-for="item in datasrc.ListCols['Kế hoạch']">{{item.Caption}}</th>
            <th class="default-column" v-if="datasrc.ListCols['Thực hiện']" :class="'cl-' + item.Name" v-for="item in datasrc.ListCols['Thực hiện']">{{item.Caption}}</th>
          </tr>
          </thead>
          <tbody>
          <tr v-if="datasrc.cells" :class="cell.CellType!=undefined?cell.CellType:'' + ' Level'+cell.Index" v-for="cell in datasrc.cells">
            <td class="default-column"><span :class="cell.Index.length > 1 ? '' : 'caption'">{{cell.Index}}</span></td>
            <td>
              <span class="icon Level"></span>
              <span v-if="cell.CellType == 'h'">
                                    {{cell.Name}}
                                </span>
              <router-link v-if="cell.CellType != 'h'"
                 :to="'/dynamic/view/Index='+cell.Index">{{cell.Name}}</router-link>
            </td>
            <td class="default-column">{{cell.TargetPlan}}{{cell.Unit}}</td>
            <td class="default-column">{{cell.TargetDone}}{{cell.Unit}}</td>
            <td class="default-column">
              <el-progress v-if="cell.CellType == 'h'" :text-inside="true" :stroke-width="18"
                           :percentage="cell.TargetProgress?parseInt(cell.TargetProgress):0"
                           :status=" cell.TargetProgress? (parseInt(cell.TargetProgress) >= 100 ? 'success' : parseInt(cell.TargetProgress) == 0 ? 'exception': '') : 'exception' "></el-progress>
            </td>
            <td class="c default-column" style="border-right: 1px solid #ddd !important;"></td>
            <td v-if="datasrc.ListCols['Kế hoạch']" :class="'default-column tg-'+item.Name" v-for="item in datasrc.ListCols['Kế hoạch']">
              <router-link v-if="item.Redirect" :to="'/dynamic/view/Index='+cell.Index">{{cell[item.DynamicText
                ? item.DynamicText : !item.Expression ? item.Name : item.Expression]}}</router-link>
              <span v-if="item.Format && item.FieldColumnType == 'DateTime'">{{cell[item.DynamicText ? item.DynamicText : !item.Expression ? item.Name : item.Expression] ? $Utils.formatDateTime(cell[item.DynamicText ? item.DynamicText : !item.Expression ? item.Name : item.Expression], (cell.CellType == 'h' ? 'DD/MM/YYYY' : 'DD/MM/YYYY HH:mm')) : ''}}</span>
              <span v-if="item.FieldColumnType != 'DateTime' && !item.Redirect">{{cell[item.DynamicText ? item.DynamicText : !item.Expression ? item.Name : item.Expression]}}</span>
            </td>
            <td class="c default-column" style="border-right: 1px solid #ddd !important;"></td>
            <td v-if="datasrc.ListCols['Thực hiện']" :class="'default-column tg-'+item.Name" v-for="item in datasrc.ListCols['Thực hiện']">
              <router-link v-if="item.Redirect" :to="'/dynamic/view/Index='+cell.Index">{{cell[item.DynamicText
                ? item.DynamicText : !item.Expression ? item.Name : item.Expression]}}</router-link>
              <a v-if="item.Expression == 'SpentTime'">{{convertSpendTime(cell.SpentTime)}}
                                   <i v-if="cell.CellType !='h'" class="fa  fa-clock-o fa-lg mt-4"
                                      :style="{color: cell.SpentTime < 0 ? 'red' : 'blue'}"></i>
                                </a>
              <el-progress v-if="item.Name == 'Progress' && cell.CellType !='h'" :text-inside="true"
                           :stroke-width="18" :percentage="cell.Progress?parseInt(cell.Progress):0"
                           :status=" cell.Progress!=undefined? (parseInt(cell.Progress) >= 100 ? 'success' : parseInt(cell.Progress) == 0 ? 'exception': '') : 'exception' "></el-progress>
              <span v-if="item.Name == 'Progress' && cell.CellType =='h'">{{cell.Progress}}%</span>
              <span v-if="item.Format && item.FieldColumnType == 'DateTime'">{{$Utils.formatDateTime(cell[item.DynamicText ? item.DynamicText : !item.Expression ? item.Name : item.Expression],'DD/MM/YYYY HH:mm') }}</span>
              <div :style="(cell.CellType !='h' && cell.Status != undefined && item.Name === 'StatusName') ? 'background-color: ' + $rootScope.arrStatusColor[cell.Status.toUpperCase()] : ''"
                v-if="item.FieldColumnType != 'DateTime' && !item.Redirect && item.Expression != 'SpentTime' && item.Name != 'Progress'">{{cell[item.DynamicText ? item.DynamicText : !item.Expression ? item.Name : item.Expression]}}</div>
            </td>
          </tr>
          </tbody>
        </table>

      </div>-->
</template>

<script>
  // import WeekTargetData from "@/temp/WeekTargetData.json"
  import Vue from "vue"
  import vuedragscroll from 'vue-dragscroll'
  import InfiniteScroll from "v-infinite-scroll"

  Vue.use(vuedragscroll)
  Vue.use(require('vue-moment'));
  export default {
    name: 'WeekTarget',
    component: {},
    props: ['datasrc'],
    data() {
      return {
        loadingUp: false,
        loadingDown: false,
      };
    },
    methods:{
      reload() {
        this.loadingUp = true;
        this.startIndex = 0;
        this.endIndex = 20;
        this.loadTask();
      },
      loadmore() {
        this.loadingDown = true;
        this.startIndex = this.endIndex+1;
        this.endIndex += 20;
        this.loadTask();
      },
      convertSpendTime(data) {
        var exp = "";
        if (Math.abs(data) >= 24) {
          exp = parseFloat(eval(data) / 24).toFixed(0) + " ngày";
        } else if (data != 0) {
          exp = data + " giờ";
        } else
          exp = data;
        return exp;
      },
      getWeekthisYear() {
        this.arrWeek = [];
        var thisWeek = moment().week();
        if(Vue.moment().isoWeekday() >= 5)
          thisWeek = thisWeek + 1;
        for (var i = thisWeek; i > 0; i--) {
          var startWeek = Vue.moment(this.thisYear.toString(),"YYYY").add(i, 'weeks').startOf('isoweek').format('DD/MM/YYYY');
          var endWeek = Vue.moment(this.thisYear.toString(),"YYYY").add(i, 'weeks').endOf('isoweek').format('DD/MM/YYYY');
          var arrW = {
            name: "Tuần " + i + " (" + startWeek + " - " + endWeek + ")",
            value: i
          };
          this.arrWeek.push(arrW);
        }
        this.model.WeekNumber = Vue.moment().isoWeek();
        this.bindObjWeek();
      },
      bindObjWeek() {
        this.isWeek = 'true';
        this.firstDayOfWeek(this.thisYear, this.model.WeekNumber, true)
      },
      firstDayOfWeek(year, week, firstTime) {
        this.model.PlanStartDateStartValue = new Date(year, 0, 1);
        var offset = this.model.PlanStartDateStartValue.getTimezoneOffset();
        this.model.PlanStartDateStartValue.setDate(this.model.PlanStartDateStartValue.getDate() + 4 - (this.model.PlanStartDateStartValue.getDay() || 7));
        this.model.PlanStartDateStartValue.setTime(this.model.PlanStartDateStartValue.getTime() + 7 * 24 * 60 * 60 * 1000 * (week + (year == this.model.PlanStartDateStartValue.getFullYear() ? -1 : 0)));
        this.model.PlanStartDateStartValue.setTime(this.model.PlanStartDateStartValue.getTime() + (this.model.PlanStartDateStartValue.getTimezoneOffset() - offset) * 60 * 1000);
        this.model.PlanStartDateStartValue.setDate(this.model.PlanStartDateStartValue.getDate() - 3);
        var e = angular.copy(this.model.PlanStartDateStartValue); // adjust when day is sunday
        e.setDate(this.model.PlanStartDateStartValue.getDate() - this.model.PlanStartDateStartValue.getDay() + (this.model.PlanStartDateStartValue.getDay() == 0 ? -6 : 1) + 6);
        e.setHours(23, 59, 59);
        this.model.PlanStartDateEndValue = e;
        if(!firstTime)
          this.getObject();
      }
    },
    created(){
    }
  }
</script>

<style lang="scss" scoped>

</style>
